#! /bin/bash

set -euo pipefail

##
#/
#/ Makes it easier to use Veracrypt for password-protected volumes.
#/
#/ Usage:
#/
#/   @PROGRAM@ -p <password> -v <volume_path> [OPTIONS]
#/   @PROGRAM@ -p <password> -V <disk_vendor> [OPTIONS]
#/
#/      -p <password>     Password used to encrypt the volume
#/      -v <volume_path>  Path of the volume to mount
#/      -V <disk_vendor>  Vendor of the disk to mount
#/
#/   Options:
#/
#/      -w  Mount the volume as read-write (default to read-only)
#/
#/   Example:
#/
#/      @PROGRAM@ -p "123" -v volume.tc
#/
#/      @PROGRAM@ -p "123" -v /dev/sdb1
#/
#/      @PROGRAM@ -p "123" -V Kingston
#/
##

where_am_i="${0%/*}"
source "${where_am_i}/tools/common"

trap 'on_init_error $?' EXIT SIGINT SIGQUIT SIGABRT SIGTERM

on_init_error() {
  local exit_code="${1}"
  trap '' EXIT SIGINT SIGQUIT SIGABRT SIGTERM
  # Write to the pipe that something went wrong
  [[ -e /proc/$$/fd/3 ]] && echo "Error - Exiting with ${exit_code}" >&3
  exit "${exit_code}"
}

cleanup() {
  local exit_code="${1}"
  trap '' EXIT SIGINT SIGQUIT SIGABRT SIGTERM

  [[ -z "${tail_pid}" ]] ||
    kill ${tail_pid}

  if veracrypt -t -l "${volume_path}" &>/dev/null; then
    info "Unmounting '${volume_path}'..."

    attempts=0
    while ! veracrypt -t -d "${volume_path}" 2>/dev/null; do
      if [[ $(( attempts % 10 )) -eq 0 ]]; then
        warn "Still in use, waiting for:"
        lsof -- ${mount_point} >&2
      fi
      attempts+=1
      sleep 1
    done
    info "Done!"
  fi

  exit "${exit_code}"
}

find_volume_path_from_disk_vendor() {
  local disk_vendor="${1}"
  local devices_matching
  devices_matching="$(lsblk --output NAME,VENDOR --sort NAME --noheadings --raw --paths | grep "${disk_vendor}")" || {
    error "Did not find any devices matching disk vendor '${disk_vendor}'"
    return 1
  }
  nb_devices_matching=$(echo "${devices_matching}" | wc -l)
  [[ ${nb_devices_matching} -eq 1 ]] ||
    warn "More than one device matching disk vendor '${disk_vendor}':\n${devices_matching}"
  disk_path=$(echo -n "${devices_matching}" | head -1 | cut -f 1 -d " ") || {
    error "Failed to extract volume path from '${devices_matching}'"
    return 1
  }
  echo "${disk_path}1"
}

password=""
read_only=1
volume_path=""
disk_vendor=""
while getopts "hp:v:V:w" option_name; do
  case $option_name in
    h) usage;;
    p) password="${OPTARG:-}";;
    v) volume_path="${OPTARG:-}";;
    V) disk_vendor="${OPTARG:-}";;
    w) unset read_only;;
    *) usage "Invalid flag."
  esac
done

[[ -n "${password:-}" ]] ||
  usage "Please specify the volume password (-p)"

[[ -n "${volume_path:-}" || -n "${disk_vendor:-}" ]] ||
  usage "Please specify the volume to mount (-v or -V)"

if [[ -n "${volume_path:-}" && -n "${disk_vendor:-}" ]]; then
  usage "Incompatible options: volume path (-v) and disk vendor (-V)"
fi

hash veracrypt ||
  die "Veracrypt is not installed."

if [[ -n "${disk_vendor:-}" ]]; then
  hash lsblk ||
    die "lsblk is not installed: cannot use disk vendor option (-V)."
  volume_path="$(find_volume_path_from_disk_vendor "${disk_vendor}")" ||
    die "Failed to find volume path from disk vendor (option -V)"
fi

[[ -b "${volume_path}" || -f "${volume_path}" ]] ||
  die "Volume specified does not exist: '${volume_path}'"

volume_path=$(readlink -f "${volume_path}") ||
  die "Failed to resolve full path: '${volume_path}'"

if veracrypt -t -l "${volume_path}" &>/dev/null; then
  die "Volume is already mounted: '${volume_path}'"
fi

# Write to the pipe that everything succeeded
[[ -e /proc/$$/fd/3 ]] && echo "STARTED" >&3
tail_pid=""
trap 'cleanup $?' EXIT SIGINT SIGQUIT SIGABRT SIGTERM

info "Mounting '${volume_path}'${read_only:+ as read-only}..."

# See options in https://www.veracrypt.fr/en/Command%20Line%20Usage.html
veracrypt -t --non-interactive --mount-options=timestamp${read_only:+",readonly"} "${volume_path}" -p "${password}" ||
  die "Failed to mount '${volume_path}'"

info "Successfully mounted '${volume_path}'"

mount_point="$(veracrypt -t -l "${volume_path}" | awk '{ print $4 }')" ||
  die "Failed to find the path of the mounted volume"

info "Mount point: '${mount_point}'"

# Write to the pipe the path of the mounted volume
[[ -e /proc/$$/fd/3 ]] && echo "${mount_point}" >&3

# Use exec so that signals are received (replace the process), could also wait on tail -f &
tail -f /dev/null &>/dev/null &
tail_pid=$!
wait $tail_pid
